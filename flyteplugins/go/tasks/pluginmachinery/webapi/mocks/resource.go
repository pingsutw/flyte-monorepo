// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"
)

// Resource is an autogenerated mock type for the Resource type
type Resource struct {
	mock.Mock
}

type Resource_ID struct {
	*mock.Call
}

func (_m Resource_ID) Return(_a0 string) *Resource_ID {
	return &Resource_ID{Call: _m.Call.Return(_a0)}
}

func (_m *Resource) OnID() *Resource_ID {
	c := _m.On("ID")
	return &Resource_ID{Call: c}
}

func (_m *Resource) OnIDMatch(matchers ...interface{}) *Resource_ID {
	c := _m.On("ID", matchers...)
	return &Resource_ID{Call: c}
}

// ID provides a mock function with given fields:
func (_m *Resource) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type Resource_Status struct {
	*mock.Call
}

func (_m Resource_Status) Return(phase core.PhaseInfo, err error) *Resource_Status {
	return &Resource_Status{Call: _m.Call.Return(phase, err)}
}

func (_m *Resource) OnStatus() *Resource_Status {
	c := _m.On("Status")
	return &Resource_Status{Call: c}
}

func (_m *Resource) OnStatusMatch(matchers ...interface{}) *Resource_Status {
	c := _m.On("Status", matchers...)
	return &Resource_Status{Call: c}
}

// Status provides a mock function with given fields:
func (_m *Resource) Status() (core.PhaseInfo, error) {
	ret := _m.Called()

	var r0 core.PhaseInfo
	if rf, ok := ret.Get(0).(func() core.PhaseInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
